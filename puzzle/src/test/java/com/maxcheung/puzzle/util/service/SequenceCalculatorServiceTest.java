package com.maxcheung.puzzle.util.service;

import static org.junit.Assert.assertEquals;

import java.math.BigInteger;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

import org.junit.Ignore;
import org.junit.Test;

import com.maxcheung.puzzle.service.SequenceCalculatorService;
import com.maxcheung.puzzle.service.SequenceCalculatorServiceImpl;

public class SequenceCalculatorServiceTest {
    SequenceCalculatorService sequenceCalculatorService;
    private static final int CORES = Runtime.getRuntime().availableProcessors();
    private static final int ONE_MIL = 1_000_000;
    private static final int TEN_MIL = 10_000_000;
    private static final String EXPECT_SUM_1MIL = "4876116127317978755731357827750324258198152034112500967562513636619100036936684812989451641586872711144897223910945432996565260927444970434341751181069846806035413935036849768233333056995297839546987556514137209634510462520098420637699122339150135182336136343710133666277873058791705786865172269505137348053072138083039879594822827363049313266638167969278996668128689537007027256375312439259756963378414674923338559662872664630830473868844780514858035026724948605282302145282924362435477685770948854908568552575590262317036471687656087729795369566602222613158544956594630758919558839490389685877537107146938624305312410352805240021534303354075104449242854817709239419566186643324364485619839724438068872130809826576025107299021708751358587712196989115611745764936650199174040410120012977020177891702305788835974404793078619886693921589490810020682287541450768124222593617753502950448413400068069839575506281609611700039096644528048520573952064700692432979185292498572446344530804462471767505921755829674711688765439056157222401212017883032535501314332340039385928056085145060700217900637020812413411308610121928026123701441848386741142775717387490509972541107994804323593105039052556442336528920420940313";
    private static final String EXPECTED_SUM_10MIL = "4965134354679533496037881013376993495326668075591058237136571301893210462205554397485458346046871671505174439119052140684795292838002680817249872641810505022565646638501039823038087919825349087113742948276465958869014967937153009210507042653716784759406474104990132600417105699346249818245755170362338348636410963027827958602070627387387637371190762453203234910722583738301147187545738499186086808411573466616788800167478444160611896941115756386401263607724175954897296230111254170395832649078031305432684837549286511287513574995486157592129647794709296457789666816805939020835876231439734345195356613226292736601057252788793340087965681999600919951527921880580234222469555649540092694498969983753938049487437771201728517703996638944517846137268050426436282189834138205226532085483911718434654756952817534777640280814947651060146651299881889217963639209611671695442939612539749915699157913249428040206172015483236632698134073138935119383343794326305309860897407987886600354288364735929660649168061998586803893138655069902283116623876321475035243649404761859567097902346495695672921268362120419292110422033441680592957056243275324335198064397994236486335706230743134619517131774420703026054371085153913199131486227686956956972511119245356278412202507872703355209589492729811695302586711987553305249239651512572366681039681828531503350406935346875126989972541107994804323593105039052556442336528920420940313";

    @Test
    /*
     * Order of magnitude: n + c
     *
     * Approx execution time 3secs
     */
    public void shouldCalculatePrecedingSum21() throws ExecutionException {
        BigInteger total = null;

        ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(CORES);
        sequenceCalculatorService = new SequenceCalculatorServiceImpl(executor);
        total = sequenceCalculatorService.calculateSequence(CORES, 5, 2);
        sequenceCalculatorService.shutdown();
        assertEquals(new BigInteger("21"), total);
    }

    @Test
    /*
     * Order of magnitude: n + c
     *
     * Approx execution time 3secs
     */
    public void shouldCalculatePrecedingSum1Mil() throws ExecutionException {
        BigInteger total = null;

        ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(CORES);

        sequenceCalculatorService = new SequenceCalculatorServiceImpl(executor);
        total = sequenceCalculatorService.calculateSequence(CORES, ONE_MIL, 200);
        sequenceCalculatorService.shutdown();
        assertEquals(new BigInteger(EXPECT_SUM_1MIL), total);
    }

    @Test
    @Ignore
    /*
     * Order of magnitude: n + c
     *
     * Approx execution time 40sec
     */
    public void shouldCalculatePrecedingSum10MilSinglethread() throws ExecutionException {
        BigInteger total = null;
        ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(1);
        sequenceCalculatorService = new SequenceCalculatorServiceImpl(executor);
        total = sequenceCalculatorService.calculateSequence(CORES, TEN_MIL, 200);
        sequenceCalculatorService.shutdown();
        assertEquals(new BigInteger(EXPECTED_SUM_10MIL), total);
    }

    @Test
    /*
     * Order of magnitude: n + c
     *
     * Approx execution time 12.55sec
     */
    public void shouldCalculatePrecedingSum10MilMultithread() throws ExecutionException {
        BigInteger total = null;
        ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(CORES);
        sequenceCalculatorService = new SequenceCalculatorServiceImpl(executor);
        total = sequenceCalculatorService.calculateSequence(CORES, TEN_MIL, 200);
        sequenceCalculatorService.shutdown();
        assertEquals(new BigInteger(EXPECTED_SUM_10MIL), total);
    }

}
