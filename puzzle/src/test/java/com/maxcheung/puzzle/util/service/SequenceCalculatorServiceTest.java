package com.maxcheung.puzzle.util.service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.math.BigInteger;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

import org.junit.Ignore;
import org.junit.Test;

import com.maxcheung.puzzle.service.SequenceCalculatorService;
import com.maxcheung.puzzle.service.SequenceCalculatorServiceImpl;

public class SequenceCalculatorServiceTest {
	SequenceCalculatorService sequenceCalculatorService;
	final int cores = Runtime.getRuntime().availableProcessors();
	final int ONE_MIL = 1_000_000;
	final int TEN_MIL = 10_000_000;

	@Test
	/*
	 * Order of magnitude: n + c
	 *
	 * Approx execution time 3secs
	 */
	public void shouldCalculatePrecedingSum_21() {
		BigInteger total = null;

		ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(cores);

		sequenceCalculatorService = new SequenceCalculatorServiceImpl(executor);
		try {
			total = sequenceCalculatorService.calculateSequence(cores, 5, 2);
			sequenceCalculatorService.shutdown();
		} catch (Exception e) {
			e.printStackTrace();
			fail("Shouldn't have thrown an exception!");
		}
		assertEquals(new BigInteger("21"), total);
	}

	@Test
	/*
	 * Order of magnitude: n + c
	 *
	 * Approx execution time 3secs
	 */
	public void shouldCalculatePrecedingSum_1Mil() {
		BigInteger total = null;

		ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(cores);

		sequenceCalculatorService = new SequenceCalculatorServiceImpl(executor);
		try {
			total = sequenceCalculatorService.calculateSequence(cores, ONE_MIL, 200);
			sequenceCalculatorService.shutdown();

		} catch (Exception e) {
			e.printStackTrace();
			fail("Shouldn't have thrown an exception!");
		}
		assertEquals(
				new BigInteger(
						"4876116127317978755731357827750324258198152034112500967562513636619100036936684812989451641586872711144897223910945432996565260927444970434341751181069846806035413935036849768233333056995297839546987556514137209634510462520098420637699122339150135182336136343710133666277873058791705786865172269505137348053072138083039879594822827363049313266638167969278996668128689537007027256375312439259756963378414674923338559662872664630830473868844780514858035026724948605282302145282924362435477685770948854908568552575590262317036471687656087729795369566602222613158544956594630758919558839490389685877537107146938624305312410352805240021534303354075104449242854817709239419566186643324364485619839724438068872130809826576025107299021708751358587712196989115611745764936650199174040410120012977020177891702305788835974404793078619886693921589490810020682287541450768124222593617753502950448413400068069839575506281609611700039096644528048520573952064700692432979185292498572446344530804462471767505921755829674711688765439056157222401212017883032535501314332340039385928056085145060700217900637020812413411308610121928026123701441848386741142775717387490509972541107994804323593105039052556442336528920420940313"),
				total);
	}

	@Test
	@Ignore
	/*
	 * Order of magnitude: n + c
	 *
	 * Approx execution time 40sec
	 */
	public void shouldCalculatePrecedingSum_10Mil_Singlethread() {
		BigInteger total = null;
		ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(1);

		sequenceCalculatorService = new SequenceCalculatorServiceImpl(executor);
		try {
			total = sequenceCalculatorService.calculateSequence(cores, TEN_MIL, 200);
			sequenceCalculatorService.shutdown();
		} catch (Exception e) {
			e.printStackTrace();
			fail("Shouldn't have thrown an exception!");
		}
		assertEquals(
				new BigInteger(
						
				total);
	}

	@Test
	/*
	 * Order of magnitude: n + c
	 *
	 * Approx execution time 12.55sec
	 */
	public void shouldCalculatePrecedingSum_10Mil_Multithread() {
		BigInteger total = null;
		ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(cores);

		sequenceCalculatorService = new SequenceCalculatorServiceImpl(executor);
		try {
			total = sequenceCalculatorService.calculateSequence(cores, TEN_MIL, 200);
			sequenceCalculatorService.shutdown();
		} catch (Exception e) {
			e.printStackTrace();
		}
		assertEquals(
				new BigInteger(
						
				total);
	}

}
